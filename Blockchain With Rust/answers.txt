1. Setting the type Output as Send basically sets the type output to implement the Send trait. It is mainly required so that the task can be transferred over across threads, since we are executing these tasks with multiple workers in parallel. It is necessary so that there is no ownership issue and undefined behavior when sending output of tasks.

2. .iter() borrows the vector, and does not allow modification of the vector. .drain() on the other hand, mutably borrows the vector. Since we are working on the removed values i.e. joining the threads with the joinhandle, the .drain allows consuming and removing the range of values from the vector. When using .iter(), we cannot call join, as it will not be able to move the ownership of the joinhandles to the join(). But drain rectifies this issue as ownership is mutable borrowed and can safely pass the joinhandles to join() as the elements are removed from the vector first.

3. We must use Arc<Block>, as when sharing this Block to other threads, we need ownership of the data, not a reference. Using a reference like Arc<&Block> introduces extra issues like lifetime and Rust ownership issues - the threads may outlive the reference to the original block in case of Arc<&Block>. Using Arc<Block> prevents these lifetime issues by making a clone of the Block passed to the Arc.